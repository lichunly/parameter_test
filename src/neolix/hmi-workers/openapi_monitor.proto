syntax = "proto2";

package openapi.monitor;

enum MonitorType {
    PIOLT = 0;
    VECHILE = 1;
    FAULT = 2;
    OBSTACLE = 3;
}

// 10hz
enum PioltStatus {
    MANUAL_DRVING = 0;          
    AUTO_DRIVING = 1;           
    CONTROL_SWITCH = 2;         // change to auto drive
    REACH_STATION = 3;         // reach station, process Parking
    SELF_CHECK_SUCCESSFUL = 4;  
    SELF_CHECK_FAIL = 5;        
    AUTO_PNC_WAIT = 6;          // WAIT from globalstate
    AUTO_PNC_ESTOP = 7;         // ESTOP from globalstate
    PATROL_ERROR_STOP = 8;      
    PATROL_ERROR_RESTORE = 9;   
    PATROL_DISENGAGE_STOP = 10; 
    ESTOP_FROM_PLANNING = 11;   // front obs detected, process estop
    AUTO_PNC_FINISH = 12;       // FINISH from globalstate
    PARK_IOV = 13;              // recv P, process Parking
    VEHILCE_COLLISION = 14;     // Vehicle collision with obs
    INVALID_POSITION = 15;      // current pos cannot start auto-drive
    INVALID_HILL_START = 16;    // current pos cannot start auto-drive
    HUMAN_TAKE_OVER = 17;       // human takeover
}

// 10hz
message VehicleException {
    enum ExceptionType {
        SENSOR = 0;
    }
    required ExceptionType exception_type = 1;
    required string msg = 2;
}

// notify patrol
enum ErrLevel {
    LEVEL_WARNING = 1;  // warning
    LEVEL_FATAL = 2;  // fatal
    LEVEL_SERIOUS = 3;  // serious
}

message PatrolItem {
    required uint64 item_code = 1;
    required string module_name = 2;
    optional ErrLevel err_level = 3;
    optional string err_msg = 4;
    optional string err_operate = 5;
}

// 2hz
message PatrolException {
    repeated PatrolItem err_items = 1;
}

// notify obstacle
// 1hz
enum ObstacleType {
    UNKNOWN = 0;
    UNKNOWN_MOVABLE = 1;
    UNKNOWN_UNMOVABLE = 2;
    PEDESTRIAN = 3;  // Pedestrian.
    BICYCLE = 4;  // bike, motor bike
    VEHICLE = 5;  // Passenger car or truck.
};

message ObstacleItem {
     optional ObstacleType obstacle_type = 1;
     optional double theta = 2; 
     optional UTMPoint position = 3;
}

message ObstacleData {
    repeated ObstacleItem obstacle_items = 1;
}

message UTMPoint {
    required double x = 1;
    required double y = 2;
    optional double z = 3 [default = 0.0];
}