/**@copyright 2018 Baidu Inc. All Rights Reserved.
 * @file localization_status.proto
 * @brief The protobuf interface for the vehicle localization module.
 *
 * @author Guowei Wan (wanguowei@baidu.com)
 */
syntax = "proto2";

package adu.common.localization;

// LiDAR-based loclaization module status
enum LocalLidarStatus {
    MSF_LOCAL_LIDAR_NORMAL = 0; // Localization result satisfy threshold
    MSF_LOCAL_LIDAR_MAP_MISSING = 1; // Can't find localization map (config.xml)
    MSF_LOCAL_LIDAR_EXTRINSICS_MISSING = 2; // Missing extrinsic parameters
    MSF_LOCAL_LIDAR_MAP_LOADING_FAILED = 3; // Fail to load localization map
    MSF_LOCAL_LIDAR_NO_OUTPUT = 4; // No output (comparing to timestamp of imu msg)
    MSF_LOCAL_LIDAR_OUT_OF_MAP = 5; // Coverage of online pointcloud and map is lower than threshold 
    MSF_LOCAL_LIDAR_NOT_GOOD = 6; // Localization result do not meet threshold
    MSF_LOCAL_LIDAR_UNDEFINED_STATUS = 7; // others
    MSF_LOCAL_LIDAR_ONE_DIRECTION_UNCERT = 8; // One direction uncertainty.
}

enum LocalLidarQuality {
    MSF_LOCAL_LIDAR_VERY_GOOD = 0;
    MSF_LOCAL_LIDAR_GOOD = 1;
    MSF_LOCAL_LIDAR_NOT_BAD = 2;
    MSF_LOCAL_LIDAR_BAD = 3;
}

// LiDAR-based localization result check (the difference between lidar and sins result)
enum LocalLidarConsistency {
    MSF_LOCAL_LIDAR_CONSISTENCY_00 = 0; // The difference is less than threshold 1
    MSF_LOCAL_LIDAR_CONSISTENCY_01 = 1; // The difference is bigger than threshold 1 but less than threshold 2
    MSF_LOCAL_LIDAR_CONSISTENCY_02 = 2; // The difference is bigger than threshold 2
    MSF_LOCAL_LIDAR_CONSISTENCY_03 = 3; // others
}

// GNSS-based localization result check (the difference between GNSS and sins result)
enum GnssConsistency {
    MSF_GNSS_CONSISTENCY_00 = 0; // The difference is less than threshold 1
    MSF_GNSS_CONSISTENCY_01 = 1; // The difference is bigger than threshold 1 but less than threshold 2
    MSF_GNSS_CONSISTENCY_02 = 2; // The difference is bigger than threshold 2
    MSF_GNSS_CONSISTENCY_03 = 3; // others
}

// IMU msg status
enum ImuMsgDelayStatus {
    IMU_DELAY_NORMAL = 0;
    IMU_DELAY_1 = 1;
    IMU_DELAY_2 = 2;
    IMU_DELAY_3 = 3;
    IMU_DELAY_ABNORMAL = 4;
}

enum ImuMsgMissingStatus {
    IMU_MISSING_NORMAL = 0;
    IMU_MISSING_1 = 1;
    IMU_MISSING_2 = 2;
    IMU_MISSING_3 = 3;
    IMU_MISSING_4 = 4;
    IMU_MISSING_5 = 5;
    IMU_MISSING_ABNORMAL = 6;
}

enum ImuMsgDataStatus {
    IMU_DATA_NORMAL = 0;
    IMU_DATA_ABNORMAL = 1;
    IMU_DATA_OTHER = 2;
}

// Odometry msg status
enum OdometryMsgDelayStatus {
    ODOMETRY_DELAY_NORMAL = 0;
    ODOMETRY_DELAY_1 = 1;
    ODOMETRY_DELAY_2 = 2;
    ODOMETRY_DELAY_3 = 3;
    ODOMETRY_DELAY_ABNORMAL = 4;
}

enum OdometryMsgMissingStatus {
    ODOMETRY_MISSING_NORMAL = 0;
    ODOMETRY_MISSING_1 = 1;
    ODOMETRY_MISSING_2 = 2;
    ODOMETRY_MISSING_3 = 3;
    ODOMETRY_MISSING_4 = 4;
    ODOMETRY_MISSING_5 = 5;
}

enum OdometryMsgDataStatus {
    ODOMETRY_DATA_NORMAL = 0;
    ODOMETRY_DATA_ABNORMAL = 1;
    ODOMETRY_DATA_OTHER = 2;
}

// The initializaiton status of localization module
enum MsfInitStatus {
    MSF_INIT = 0;
    MSF_ALIGNING = 1;
    MSF_ALIGNED_INIT = 2;
    MSF_ALIGNED_CONVERGED = 3;
    MSF_ALIGNED_GOOD = 4;
    MSF_ALIGNED_VALID = 5;
}

// The running status of localization module
enum MsfRunningStatus {
    MSF_SOL_LIDAR_GNSS = 0;
    MSF_SOL_X_GNSS = 1;
    MSF_SOL_LIDAR_X = 2;
    MSF_SOL_LIDAR_XX = 3;
    MSF_SOL_LIDAR_XXX = 4;
    MSF_SOL_X_X = 5;
    MSF_SOL_X_XX = 6;
    MSF_SOL_X_XXX = 7;
    MSF_SSOL_LIDAR_GNSS = 8;
    MSF_SSOL_X_GNSS = 9;
    MSF_SSOL_LIDAR_X = 10;
    MSF_SSOL_LIDAR_XX = 11;
    MSF_SSOL_LIDAR_XXX = 12;
    MSF_SSOL_X_X = 13;
    MSF_SSOL_X_XX = 14;
    MSF_SSOL_X_XXX = 15;
    MSF_NOSOL_LIDAR_GNSS = 16;
    MSF_NOSOL_X_GNSS = 17;
    MSF_NOSOL_LIDAR_X = 18;
    MSF_NOSOL_LIDAR_XX = 19;
    MSF_NOSOL_LIDAR_XXX = 20;
    MSF_NOSOL_X_X = 21;
    MSF_NOSOL_X_XX = 22;
    MSF_NOSOL_X_XXX = 23;
    MSF_RUNNING_INIT = 24;
    MSF_REINIT_ABNORMALLY = 25;
    MSF_NOSOL_IMU_MISSING_TOO_MUCH = 26;
    MSF_NOSOL_IMU_BLOCKED_TOO_MUCH = 27;
}

// The status of sensor msg
message MsfSensorMsgStatus
{
    optional ImuMsgDelayStatus imu_delay_status = 1;
    optional ImuMsgMissingStatus imu_missing_status = 2;
    optional ImuMsgDataStatus imu_data_status = 3;
    optional OdometryMsgDelayStatus odometry_delay_status = 4;
    optional OdometryMsgMissingStatus odometyry_missing_status = 5;
    optional OdometryMsgDataStatus odometry_data_status = 6;
}

// The init pose source 
enum MsfInitPoseSource {
    UNKNOWN_SOURCE = 0;
    GNSS_HEADING = 1;
    LOCAL_SEARCH_FROM_INTEGPVA = 2;
    LOCAL_SEARCH_FROM_FILE = 3;
    LOCAL_UPDATE_FROM_FILE = 4;
    USER_INTERACTION = 5;
    INSPVA_RECORD = 6;
}

// The init pose status
enum MsfInitPoseStatus { 
    INIT_WAITING = 0;
    INIT_DOING = 1;
    INIT_SUCCESSFUL = 2;
    INIT_FAILED = 3;
    INIT_TERMINATED = 4;
}

// The init details
message MsfInitDetails { 
    optional MsfInitPoseSource init_pose_source = 1;
    optional MsfInitPoseStatus local_search_from_integpva_status = 2;
    optional MsfInitPoseStatus local_search_from_file_status = 3;
    optional MsfInitPoseStatus local_update_from_file_status = 4;
    optional MsfInitPoseStatus user_interaction_status = 5;
}

// The localization fault
enum MsfFaultStatus {
    MSF_UNSURE_STATUS = 0;
    MSF_NORMAL_STATUS  = 1;
    MSF_FAULTY_STATUS  = 2;
}

message MsfInitExceptions {
    optional bool imu_missing = 1;
    optional bool gnss_missing = 2;
    optional bool heading_missing = 3;
    optional bool gnss_bad = 4;
    optional bool heading_bad = 5;
    optional bool inspva_file_missing = 6;
    optional bool inspva_file_useless = 7;
    optional bool out_of_map = 8;
    optional bool lidar_loc_bad = 9;
}

message MsfRunningExceptions {
    optional bool imu_missing = 1;
    optional bool imu_blocked = 2;
    optional bool gnss_unworking = 3;
    optional bool lidar_loc_unworking= 4;
    optional bool fusion_loc_bad = 5;
    optional bool gnss_map_offset_large = 6;
}

message MsfInitFault {
    optional MsfFaultStatus fault_status = 1;
    optional MsfInitExceptions init_exceptions = 2;
    optional bytes cause_description_en = 3;
    optional bytes cause_description_cn = 4;
}

message MsfRunningFault {
    optional MsfFaultStatus fault_status = 1;
    optional MsfRunningExceptions running_exceptions = 2;
    optional bytes cause_description_en = 3;
    optional bytes cause_description_cn = 4;
}

message MsfReinitFault {
    optional MsfFaultStatus fault_status = 1;
}

message MsfFaults {
    optional MsfInitFault init_fault = 1;
    optional MsfRunningFault running_fault = 2;
    optional MsfReinitFault reinit_fault = 3;
}

// Offset between gnss and map check
enum MsfGnssMapOffsetStatus {
    MSF_LOCAL_GNSS_MAP_OFFSET_NORMAL = 0;
    MSF_LOCAL_GNSS_MAP_OFFSET_ABNORMAL = 1;
}

message MsfGnssMapOffset {
    optional MsfGnssMapOffsetStatus status = 1;
    optional double offsetx = 2;
    optional double offsety = 3;
}

// The status of msf localization module
message MsfStatus
{    
    optional LocalLidarConsistency local_lidar_consistency = 1;
    optional GnssConsistency gnss_consistency = 2;
    optional LocalLidarStatus local_lidar_status = 3;
    optional uint32 gnsspos_position_type = 4; //NovAtel gnsspos's position type  92 represents arm param file missing, 91 msg missing, 93 other
    optional uint32 heading_position_type = 5; // NovAtel heading's position type, 91 msg missing, 93 other
    optional MsfInitStatus msf_init_status = 6;
    optional MsfRunningStatus msf_running_status = 7;
    optional MsfInitDetails msf_init_details = 8;
    optional LocalLidarQuality local_lidar_quality = 9;
    optional MsfFaults msf_faults = 10;
    optional MsfGnssMapOffset gnss_map_offset = 11;
}