/**@copyright 2016 Baidu Inc. All Rights Reserved.
 * @file localization_pose.proto
 * @brief The protobuf interface for the vehicle localization module.
 *
 * @author Shiyu Song (songshiyu@baidu.com), Wenbo Li (liwenbo01@baidu.com)
 */
syntax = "proto2";

package adu.common.localization;

import "header.proto";
import "common_geometry.proto";
import "localization_raw_imu.proto";
import "localization_status.proto";

message Pose {
    // Position of the vehicle reference point (VRP) in the map reference frame.
    // The VRP is the center of rear axle.
    optional PointENU position = 1;

    // A quaternion that represents the rotation from the map coordinate (East/North/Up) to the
    // vehicle coordinate (Right/Forward/Up).
    optional Quaternion orientation = 2;

    // Linear velocity of the VRP in the map reference frame.
    optional Point3D linear_velocity = 3;  // East/north/up in meters per second.

    // Linear acceleration of the VRP in the vehicle reference frame.
    optional Point3D linear_acceleration = 4;  // Right/forward/up in meters per square second.

    // Angular velocity of the vehicle in the vehicle reference frame.
    optional Point3D angular_velocity = 5;  // Around right/forward/up axes in radians per second.

    // A quaternion that represents the rotation from the vehicle coordinate (Right/Forward/Up) to 
    // world coordinate (East/North/Up).
    optional Quaternion orientation_vehicle_world = 6;

    // Position (lat,lon,alt) of the vehicle reference point (VRP) in the map reference frame.
    optional PointLLH position_llh = 7;
}

message Uncertainty {
    // Standard deviation of position, east/north/up in meters.
    optional Point3D position_std_dev = 1;

    // Standard deviation of quaternion qx/qy/qz, unitless.
    optional Point3D orientation_std_dev = 2;

    // Standard deviation of linear velocity, east/north/up in meters per second.
    optional Point3D linear_velocity_std_dev = 3;

    // Standard deviation of linear acceleration, right/forward/up in meters per square second.
    optional Point3D linear_acceleration_std_dev = 4;

    // Standard deviation of angular velocity, right/forward/up in radians per second.
    optional Point3D angular_velocity_std_dev = 5;

    // TODO: Define covariance items when needed.
    // covariance matrix of the position the size is 3x3
    repeated double position_covar = 6 [packed = true];
}

message LocalizationEstimate {
    optional adu.common.header.Header header = 1;
    optional Pose pose = 2;
    optional Uncertainty uncertainty = 3;

    // The time of pose measurement, seconds since the GPS epoch (Jan 6, 1980).
    optional double measurement_time = 4;  // In seconds.

    optional adu.common.localization_imu.CorrectImuData imuframe_corr_imu = 5;
    optional adu.common.localization_imu.CorrectImuData vehicleframe_corr_imu = 6;

    optional MsfSensorMsgStatus sensor_status = 7;
    optional MsfStatus msf_status = 8;
    optional bool dropped = 9;
}
