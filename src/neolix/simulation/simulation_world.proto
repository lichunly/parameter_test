syntax = "proto2";
package adu.simulation;

import "decision.proto";
import "planning.proto";
import "prediction_obstacle.proto";
import "simulation_common.proto";
import "map.proto";
import "router.proto";
import "monitor.proto";
import "global_adc_status.proto";
import "routing_path.proto";

// Next-id: 3
message Prediction {
  optional double probability = 1;
  repeated PolygonPoint predicted_trajectory = 2;
}

// Next-id: 12
message Decision {
  enum Type {
    IGNORE = 0; // Ignore the object
    STOP = 1; // Stop at a distance from the object
    NUDGE = 2; // Go around the object
    YIELD = 3; // Go after the object
    OVERTAKE = 4; // Go before the object
    FOLLOW = 5; // Follow the object in the same lane
    SIDEPASS = 6; // Pass the object in neighbouring lane
  }
  required Type type = 1 [default = IGNORE];

  // Shape Info
  // Can be used for corners of nudge region
  repeated PolygonPoint polygon_point = 2;

  // Position Info
  // Can be used for stop fence
  optional double heading = 3;
  optional double latitude = 4;
  optional double longitude = 5;
  optional double position_x = 6;
  optional double position_y = 7;
  optional double length = 8 [default = 2.8];
  optional double width = 9 [default = 1.4];
  optional double height = 10 [default = 1.8];

  enum StopReasonCode {
    STOP_REASON_HEAD_VEHICLE = 1;
    STOP_REASON_DESTINATION = 2;
    STOP_REASON_PEDESTRIAN = 3;
    STOP_REASON_OBSTACLE = 4;
    STOP_REASON_SIGNAL = 100;
    STOP_REASON_STOP_SIGN = 101;
    STOP_REASON_YIELD_SIGN = 102;
    STOP_REASON_CLEAR_ZONE = 103;
    STOP_REASON_CROSSWALK = 104;
    STOP_REASON_EMERGENCY = 105;
    STOP_REASON_NOT_READY = 106;
  }
  optional StopReasonCode stopReason = 11;
}

// Next-id: 35
message Object {
  // ID
  optional string id = 1;  // primary identifier for each object

  // Shape Info
  repeated PolygonPoint polygon_point = 2;  // corners of an object

  // Position Info
  optional double heading = 3;
  optional double latitude = 4;
  optional double longitude = 5;
  optional double position_x = 6;
  optional double position_y = 7;
  optional double length = 8 [default = 2.8];
  optional double width = 9 [default = 1.4];
  optional double height = 10 [default = 1.8];

  // Motion Info
  // For objects with motion info such as ADC.
  optional double speed = 11; // in m/s
  optional double speed_acceleration = 12; // in m/s^2
  optional double speed_jerk = 13;
  optional double spin = 14;
  optional double spin_acceleration = 15;
  optional double spin_jerk = 16;
  optional double speed_heading = 30;
  optional double angular_velocity_z = 34;
  optional PolygonPoint velocity = 37; // velocity vector of perception obstacle

  // Header Sequence number
  optional uint32 sequence_num = 35;

  // Current speed limit
  optional double speed_limit = 36;

  // Signal Info
  // For objects with signals set and current signal such as Traffic Light and Stop Sign.
  repeated string signal_set = 17;
  optional string current_signal = 18;

  // Time Info
  optional double timestamp_sec = 19;

  // Decision Info
  repeated Decision decision = 20;
  // ADC decision results
  optional .adu.common.decision.DecisionResult adc_decision_result = 29;
  // ADC planning trajectory
  optional .adu.common.planning.ADCTrajectory adc_trajectory = 31;

  // Chassis Info
  // For ADC
  optional double throttle_percentage = 21;
  optional double brake_percentage = 22;
  optional double steering_angle = 23;
  enum DisengageType {
    DISENGAGE_NONE = 0;
    DISENGAGE_UNKNOWN = 1;
    DISENGAGE_MANUAL = 2;
  };

  optional DisengageType disengage_type = 24;
  optional bool disengage_detected = 32;
  optional adu.common.status.DrivingMode driving_mode = 33;

  enum Type {
    UNKNOWN = 0;
    UNKNOWN_MOVABLE = 1;
    UNKNOWN_UNMOVABLE = 2;
    PEDESTRIAN = 3;  // pedestrian, usually determined by moving behaviour.
    BICYCLE = 4;  // bike, motor bike.
    VEHICLE = 5;  // passenger car or truck.
    VIRTUAL = 6; // virtual object created by decision module.
  };
  
  optional Type type = 25;  // obstacle type
  repeated Prediction prediction = 26;

  ///////////////////////////////////////////
  // Shadow topic from local player
  ///////////////////////////////////////////
  repeated Decision decision_lp = 27;
  repeated Prediction prediction_lp = 28;
  ///////////////////////////////////////////
}

message DelayItem {
    optional uint32 delay = 1;
    optional uint32 last_delay = 2;
    optional double header_timestamp = 3;
    optional double recv_timestamp = 4;
    optional uint32 count = 5;
}

message Delay {
    optional DelayItem adc_status = 1;
    optional DelayItem decision = 2;
    optional DelayItem localization = 3;
    optional DelayItem localization_pcl = 4;
    optional DelayItem perception_obstacle = 5;
    optional DelayItem perception_radar = 6;
    optional DelayItem planning_trajectory = 7;
    optional DelayItem prediction= 8;
    optional DelayItem routing_result = 9;
    optional DelayItem traffic_light = 10;
}

// Next-id: 2
message Debug {
    optional string novatel_position_type = 1;
}

message PlanningRefLine {
  optional int32 type = 1;
  optional string refline_json = 2 ;
}

message PlanningTrajEval {
  optional double speed_limit = 1;
  optional .adu.common.planning.ADCTrajectoryPoint planning_traj_point = 2;
  optional uint32 sequence_num = 3;
}

message MsgNum {
    optional uint32 carstatus = 1 [default = 0];
    optional uint32 obs = 2 [default = 0];
    optional uint32 prediction = 3 [default = 0];
    optional uint32 decision = 4 [default = 0];
    optional uint32 planning = 5 [default = 0];
}

message LaneChangeInfo {
    optional PolygonPoint start_point = 1;
    optional PolygonPoint end_point = 2;
}

message Lane {
    repeated PolygonPoint point = 1;
}

message PassageRegion {
    repeated Lane lane = 1;
}

message Way {
    repeated PassageRegion passage_region = 1;
    repeated LaneChangeInfo lane_change_info = 2;
}

message DecisionStatus {
  enum MainDecisionType {
    CRUISE = 1;
    STOP = 2;
    ESTOP = 3;
    CHANGE_LANE = 4;
    MISSION_COMPLETE = 6;
    NOT_READY = 7;
    PARKING = 8;
  };

  enum LaneChangeType {
    LEFT = 1;
    RIGHT = 2;
  };

  optional MainDecisionType decision_status = 1;
  optional LaneChangeType lane_change_type = 2;
}

// Next-id:40
message SimulationWorld {
  // Time
  optional double timestamp_sec = 1;

  // Objects in the world and the associated predictions/decisions
  repeated Object object = 3;

  // Autonomous driving cars
  optional Object auto_driving_car = 4;

  // Traffic light status
  optional Object traffic_signal = 6;

  // Main decision for adc
  optional DecisionStatus decision_status = 36;

  // Routing path
  repeated PolygonPoint route = 7;

  // Router path (new version on 20170727)
  //repeated Way way;
  repeated Way way = 35;

  optional RoutingPath routing_path = 38;

  // Planned trajectory
  repeated Object planning_trajectory = 8;

  // Main stop
  optional Object main_stop = 9;

  // Speed limit
  optional double speed_limit = 10;

  // Map Hashcode
  optional string map_md5 = 11;

  // Localization
  optional PolygonPoint localization = 12;

  optional PolygonPoint localization_input = 13;

  optional string point_cloud = 14;

  // Radar objects in the world
  repeated Object radar = 15;
  
  enum PerceptionErrorCode {
    ERROR_NONE = 0;
    ERROR_TF = 1;
    ERROR_PROCESS = 2;
    ERROR_UNKNOWN = 3;
  }
  optional PerceptionErrorCode perception_error_code = 16;

  optional Delay delay = 17;

  // Relative time w.r.t. the begin time of rosbag
  optional double relative_time_sec = 18;
  
  optional string decision_task_name = 19;

  optional .adu.common.router.RoutingRequest routing_req = 20;

  optional bool has_routing_res = 24 [default = false];

  optional bool has_perception_res = 28 [default = false];

  optional bool drop_frame = 25 [default = true];

  optional Debug debug_log = 26;

  ///////////////////////////////////////////
  // Shadow topic from local player
  ///////////////////////////////////////////
  // Planned trajectory
  repeated Object planning_trajectory_lp = 21;

  // Main stop
  optional Object main_stop_lp = 22;

  // Speed limit
  optional double speed_limit_lp = 23;

  ///////////////////////////////////////////

  ///////////////////////////////////////////////////////////
  // Deprecated fields.
  optional double speed = 2 [deprecated = true];
  optional .adu.common.hdmap.Map map = 5 [deprecated = true];

  optional .adu.common.prediction.PredictionObstacles prediction_res = 27;

    // pnc modules's logical referrence line used to assist planning
    repeated PlanningRefLine planning_refline = 29;
    optional string position_type = 30;
    optional string ins_solution_status = 31;

  // Whether last frame or not
  optional bool last_frame = 32 [default = false];
  optional adu.simulation.Monitor monitor = 33;

  optional MsgNum msg_num = 34;
  // Planning somatosensory evaluation trajectory
  repeated PlanningTrajEval planning_traj_eval = 37;

  // Perception ultrasonic edges
  repeated Object collision_edge = 39;
}
