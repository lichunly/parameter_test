syntax = "proto2";
package adu.common.hdmap;

import "common_geometry.proto";
import "map_crosswalk.proto";
import "map_junction.proto";
import "map_lane.proto";
import "map_overlap.proto";
import "map_stop_sign.proto";
import "map_signal.proto";
import "map_yield_sign.proto";
import "map_clear_area.proto";
import "map_speed_bump.proto";
import "map_parking_space.proto";
import "map_road.proto";

// This message defines how we project the ellipsoidal Earth surface to a plane.
message Projection {
  // Map origin is a point close to the center of map. Its coordinate is defined to be (0, 0, 0).
  optional PointLLH origin = 1;

  // Projection Method 1: UTM. See the link below for details.
  //    https://en.wikipedia.org/wiki/Universal_Transverse_Mercator_coordinate_system
  // Recommended PROJ.4 setting:
  //  "+proj=utm +zone={zone_id} +ellps=WGS84 +no_defs"
  message UTM {
    // 1~60 in northern hemisphere, -1~-60 in southern hemisphere. If not given (0 by default), zone
    // is determined based on the longitude of origin.
    optional sint32 zone_id = 1 [default = 0];
  }

  // Projection Method 2: Local Transverse Mercator (LTM).
  // In LTM, the center meridian is the meridian passing the map origin. The scale factor is chosen
  // to minimize the distortion over the map. See the link below for details.
  //    http://wiki.baidu.com/pages/viewpage.action?pageId=210674437
  //
  // Recommended PROJ.4 setting:
  //  "+proj=tmerc +lat_0={origin.lat} +lon_0={origin.lon} +k={scale_factor} +ellps=WGS84 +no_defs"
  message LTM {
    optional double scale_factor = 1 [default = 1.0];
  }

  oneof type {
    UTM utm = 2;
    LTM ltm = 3;
  }
}

message Header {
  optional bytes version = 1;
  optional bytes date = 2;
  optional Projection projection = 3;
  optional bytes district = 4;
}

message Map {
  optional Header header = 1;

  repeated Crosswalk crosswalk = 2;
  repeated Junction junction = 3;
  repeated Lane lane = 4;
  repeated StopSign stop_sign = 5;
  repeated Signal signal = 6;
  repeated YieldSign yield = 7;
  repeated Overlap overlap = 8;
  repeated ClearArea clear_area = 9;
  repeated SpeedBump speed_bump = 10;
  repeated ParkingSpace parking_space = 11;
  repeated Road road = 12;
}
