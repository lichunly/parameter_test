syntax = "proto2";
package adu.common.planning;

import "global_adc_status.proto";
import "header.proto";
import "planning_internal.proto";

message ADCTrajectoryPoint {
    optional double x = 1;  // in meters.
    optional double y = 2;  // in meters.
    optional double z = 3;  // height in meters.
    optional double s = 4 [deprecated = true];  // in meters, reference to route SL-coordinate
    optional double l = 5 [deprecated = true];  // in meters, reference to route SL-coordinate

    optional double speed = 6;  // speed, in meters / second
    optional double acceleration_s = 7; // acceleration in s direction
    optional double curvature = 8; // curvature (k = 1/r), unit: (1/meters)
    optional double curvature_change_rate = 9; // change of curvature in unit s (dk/ds)
    optional double relative_time = 10; // in seconds relative time (relative_time = time_of_this_state - timestamp_in_header)
    optional double theta = 11; // relative to absolute coordinate system
    optional double accumulated_s = 12; // calculated from the first point in this trajectory
    optional bool max_throttle_limit = 13 [default = true];  // the value is false when pass the bump 
}

message ADCSignals {
    enum SignalType {
        LEFT_TURN = 1;
        RIGHT_TURN = 2;
        LOW_BEAM_LIGHT = 3;
        HIGH_BEAM_LIGHT = 4;
        FOG_LIGHT = 5;
        EMERGENCY_LIGHT = 6;
    }
    repeated SignalType signal = 1;
}

message EStop {
    optional bool is_estop = 1; // is_estop == true when emergency stop is required
}

message ADCPathPoint {
    optional double x = 1; // in meters
    optional double y = 2; // in meters
    optional double z = 3; // in meters
    optional double curvature = 4; // curvature (k = 1/r), unit: (1/meters)
    optional double heading = 5; // relative to absolute coordinate system
}

message ADCTrajectory {
    optional adu.common.header.Header header = 1;
    optional double total_path_length = 2; // in meters
    optional double total_path_time = 3; // in seconds
    repeated ADCTrajectoryPoint adc_trajectory_point = 4;
    optional ADCSignals signals = 5;
    optional EStop estop = 6;
    repeated ADCPathPoint adc_path_point = 7;
    optional bool is_replan = 9 [default = false]; // is_replan == true mean replan triggered
    optional adu.common.status.GearPosition gear = 10; // Specify trajectory gear
    optional adu.common.planning_internal.Debug debug = 8;
    optional bool low_speed_control = 11 [default = false]; // use for parking and three point uturn
}
